// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ryutah/learn-golang/orm/gorm/gentool/gen/model"
)

func newCountrylanguage(db *gorm.DB, opts ...gen.DOOption) countrylanguage {
	_countrylanguage := countrylanguage{}

	_countrylanguage.countrylanguageDo.UseDB(db, opts...)
	_countrylanguage.countrylanguageDo.UseModel(&model.Countrylanguage{})

	tableName := _countrylanguage.countrylanguageDo.TableName()
	_countrylanguage.ALL = field.NewAsterisk(tableName)
	_countrylanguage.Countrycode = field.NewString(tableName, "countrycode")
	_countrylanguage.Language = field.NewString(tableName, "language")
	_countrylanguage.Isofficial = field.NewBool(tableName, "isofficial")
	_countrylanguage.Percentage = field.NewFloat32(tableName, "percentage")

	_countrylanguage.fillFieldMap()

	return _countrylanguage
}

type countrylanguage struct {
	countrylanguageDo countrylanguageDo

	ALL         field.Asterisk
	Countrycode field.String
	Language    field.String
	Isofficial  field.Bool
	Percentage  field.Float32

	fieldMap map[string]field.Expr
}

func (c countrylanguage) Table(newTableName string) *countrylanguage {
	c.countrylanguageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c countrylanguage) As(alias string) *countrylanguage {
	c.countrylanguageDo.DO = *(c.countrylanguageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *countrylanguage) updateTableName(table string) *countrylanguage {
	c.ALL = field.NewAsterisk(table)
	c.Countrycode = field.NewString(table, "countrycode")
	c.Language = field.NewString(table, "language")
	c.Isofficial = field.NewBool(table, "isofficial")
	c.Percentage = field.NewFloat32(table, "percentage")

	c.fillFieldMap()

	return c
}

func (c *countrylanguage) WithContext(ctx context.Context) *countrylanguageDo {
	return c.countrylanguageDo.WithContext(ctx)
}

func (c countrylanguage) TableName() string { return c.countrylanguageDo.TableName() }

func (c countrylanguage) Alias() string { return c.countrylanguageDo.Alias() }

func (c *countrylanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *countrylanguage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["countrycode"] = c.Countrycode
	c.fieldMap["language"] = c.Language
	c.fieldMap["isofficial"] = c.Isofficial
	c.fieldMap["percentage"] = c.Percentage
}

func (c countrylanguage) clone(db *gorm.DB) countrylanguage {
	c.countrylanguageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c countrylanguage) replaceDB(db *gorm.DB) countrylanguage {
	c.countrylanguageDo.ReplaceDB(db)
	return c
}

type countrylanguageDo struct{ gen.DO }

func (c countrylanguageDo) Debug() *countrylanguageDo {
	return c.withDO(c.DO.Debug())
}

func (c countrylanguageDo) WithContext(ctx context.Context) *countrylanguageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c countrylanguageDo) ReadDB() *countrylanguageDo {
	return c.Clauses(dbresolver.Read)
}

func (c countrylanguageDo) WriteDB() *countrylanguageDo {
	return c.Clauses(dbresolver.Write)
}

func (c countrylanguageDo) Session(config *gorm.Session) *countrylanguageDo {
	return c.withDO(c.DO.Session(config))
}

func (c countrylanguageDo) Clauses(conds ...clause.Expression) *countrylanguageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c countrylanguageDo) Returning(value interface{}, columns ...string) *countrylanguageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c countrylanguageDo) Not(conds ...gen.Condition) *countrylanguageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c countrylanguageDo) Or(conds ...gen.Condition) *countrylanguageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c countrylanguageDo) Select(conds ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c countrylanguageDo) Where(conds ...gen.Condition) *countrylanguageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c countrylanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *countrylanguageDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c countrylanguageDo) Order(conds ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c countrylanguageDo) Distinct(cols ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c countrylanguageDo) Omit(cols ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c countrylanguageDo) Join(table schema.Tabler, on ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c countrylanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c countrylanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c countrylanguageDo) Group(cols ...field.Expr) *countrylanguageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c countrylanguageDo) Having(conds ...gen.Condition) *countrylanguageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c countrylanguageDo) Limit(limit int) *countrylanguageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c countrylanguageDo) Offset(offset int) *countrylanguageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c countrylanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *countrylanguageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c countrylanguageDo) Unscoped() *countrylanguageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c countrylanguageDo) Create(values ...*model.Countrylanguage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c countrylanguageDo) CreateInBatches(values []*model.Countrylanguage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c countrylanguageDo) Save(values ...*model.Countrylanguage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c countrylanguageDo) First() (*model.Countrylanguage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Countrylanguage), nil
	}
}

func (c countrylanguageDo) Take() (*model.Countrylanguage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Countrylanguage), nil
	}
}

func (c countrylanguageDo) Last() (*model.Countrylanguage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Countrylanguage), nil
	}
}

func (c countrylanguageDo) Find() ([]*model.Countrylanguage, error) {
	result, err := c.DO.Find()
	return result.([]*model.Countrylanguage), err
}

func (c countrylanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Countrylanguage, err error) {
	buf := make([]*model.Countrylanguage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c countrylanguageDo) FindInBatches(result *[]*model.Countrylanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c countrylanguageDo) Attrs(attrs ...field.AssignExpr) *countrylanguageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c countrylanguageDo) Assign(attrs ...field.AssignExpr) *countrylanguageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c countrylanguageDo) Joins(fields ...field.RelationField) *countrylanguageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c countrylanguageDo) Preload(fields ...field.RelationField) *countrylanguageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c countrylanguageDo) FirstOrInit() (*model.Countrylanguage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Countrylanguage), nil
	}
}

func (c countrylanguageDo) FirstOrCreate() (*model.Countrylanguage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Countrylanguage), nil
	}
}

func (c countrylanguageDo) FindByPage(offset int, limit int) (result []*model.Countrylanguage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c countrylanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c countrylanguageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c countrylanguageDo) Delete(models ...*model.Countrylanguage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *countrylanguageDo) withDO(do gen.Dao) *countrylanguageDo {
	c.DO = *do.(*gen.DO)
	return c
}
