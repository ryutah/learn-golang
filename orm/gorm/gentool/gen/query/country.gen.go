// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ryutah/learn-golang/orm/gorm/gentool/gen/model"
)

func newCountry(db *gorm.DB, opts ...gen.DOOption) country {
	_country := country{}

	_country.countryDo.UseDB(db, opts...)
	_country.countryDo.UseModel(&model.Country{})

	tableName := _country.countryDo.TableName()
	_country.ALL = field.NewAsterisk(tableName)
	_country.Code = field.NewString(tableName, "code")
	_country.Name = field.NewString(tableName, "name")
	_country.Continent = field.NewString(tableName, "continent")
	_country.Region = field.NewString(tableName, "region")
	_country.Surfacearea = field.NewFloat32(tableName, "surfacearea")
	_country.Indepyear = field.NewInt16(tableName, "indepyear")
	_country.Population = field.NewInt32(tableName, "population")
	_country.Lifeexpectancy = field.NewFloat32(tableName, "lifeexpectancy")
	_country.Gnp = field.NewFloat64(tableName, "gnp")
	_country.Gnpold = field.NewFloat64(tableName, "gnpold")
	_country.Localname = field.NewString(tableName, "localname")
	_country.Governmentform = field.NewString(tableName, "governmentform")
	_country.Headofstate = field.NewString(tableName, "headofstate")
	_country.Capital = field.NewInt32(tableName, "capital")
	_country.Code2 = field.NewString(tableName, "code2")

	_country.fillFieldMap()

	return _country
}

type country struct {
	countryDo countryDo

	ALL            field.Asterisk
	Code           field.String
	Name           field.String
	Continent      field.String
	Region         field.String
	Surfacearea    field.Float32
	Indepyear      field.Int16
	Population     field.Int32
	Lifeexpectancy field.Float32
	Gnp            field.Float64
	Gnpold         field.Float64
	Localname      field.String
	Governmentform field.String
	Headofstate    field.String
	Capital        field.Int32
	Code2          field.String

	fieldMap map[string]field.Expr
}

func (c country) Table(newTableName string) *country {
	c.countryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c country) As(alias string) *country {
	c.countryDo.DO = *(c.countryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *country) updateTableName(table string) *country {
	c.ALL = field.NewAsterisk(table)
	c.Code = field.NewString(table, "code")
	c.Name = field.NewString(table, "name")
	c.Continent = field.NewString(table, "continent")
	c.Region = field.NewString(table, "region")
	c.Surfacearea = field.NewFloat32(table, "surfacearea")
	c.Indepyear = field.NewInt16(table, "indepyear")
	c.Population = field.NewInt32(table, "population")
	c.Lifeexpectancy = field.NewFloat32(table, "lifeexpectancy")
	c.Gnp = field.NewFloat64(table, "gnp")
	c.Gnpold = field.NewFloat64(table, "gnpold")
	c.Localname = field.NewString(table, "localname")
	c.Governmentform = field.NewString(table, "governmentform")
	c.Headofstate = field.NewString(table, "headofstate")
	c.Capital = field.NewInt32(table, "capital")
	c.Code2 = field.NewString(table, "code2")

	c.fillFieldMap()

	return c
}

func (c *country) WithContext(ctx context.Context) *countryDo { return c.countryDo.WithContext(ctx) }

func (c country) TableName() string { return c.countryDo.TableName() }

func (c country) Alias() string { return c.countryDo.Alias() }

func (c *country) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *country) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["code"] = c.Code
	c.fieldMap["name"] = c.Name
	c.fieldMap["continent"] = c.Continent
	c.fieldMap["region"] = c.Region
	c.fieldMap["surfacearea"] = c.Surfacearea
	c.fieldMap["indepyear"] = c.Indepyear
	c.fieldMap["population"] = c.Population
	c.fieldMap["lifeexpectancy"] = c.Lifeexpectancy
	c.fieldMap["gnp"] = c.Gnp
	c.fieldMap["gnpold"] = c.Gnpold
	c.fieldMap["localname"] = c.Localname
	c.fieldMap["governmentform"] = c.Governmentform
	c.fieldMap["headofstate"] = c.Headofstate
	c.fieldMap["capital"] = c.Capital
	c.fieldMap["code2"] = c.Code2
}

func (c country) clone(db *gorm.DB) country {
	c.countryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c country) replaceDB(db *gorm.DB) country {
	c.countryDo.ReplaceDB(db)
	return c
}

type countryDo struct{ gen.DO }

func (c countryDo) Debug() *countryDo {
	return c.withDO(c.DO.Debug())
}

func (c countryDo) WithContext(ctx context.Context) *countryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c countryDo) ReadDB() *countryDo {
	return c.Clauses(dbresolver.Read)
}

func (c countryDo) WriteDB() *countryDo {
	return c.Clauses(dbresolver.Write)
}

func (c countryDo) Session(config *gorm.Session) *countryDo {
	return c.withDO(c.DO.Session(config))
}

func (c countryDo) Clauses(conds ...clause.Expression) *countryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c countryDo) Returning(value interface{}, columns ...string) *countryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c countryDo) Not(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c countryDo) Or(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c countryDo) Select(conds ...field.Expr) *countryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c countryDo) Where(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c countryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *countryDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c countryDo) Order(conds ...field.Expr) *countryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c countryDo) Distinct(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c countryDo) Omit(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c countryDo) Join(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c countryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c countryDo) RightJoin(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c countryDo) Group(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c countryDo) Having(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c countryDo) Limit(limit int) *countryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c countryDo) Offset(offset int) *countryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c countryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *countryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c countryDo) Unscoped() *countryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c countryDo) Create(values ...*model.Country) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c countryDo) CreateInBatches(values []*model.Country, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c countryDo) Save(values ...*model.Country) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c countryDo) First() (*model.Country, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Take() (*model.Country, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Last() (*model.Country, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Find() ([]*model.Country, error) {
	result, err := c.DO.Find()
	return result.([]*model.Country), err
}

func (c countryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Country, err error) {
	buf := make([]*model.Country, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c countryDo) FindInBatches(result *[]*model.Country, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c countryDo) Attrs(attrs ...field.AssignExpr) *countryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c countryDo) Assign(attrs ...field.AssignExpr) *countryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c countryDo) Joins(fields ...field.RelationField) *countryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c countryDo) Preload(fields ...field.RelationField) *countryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c countryDo) FirstOrInit() (*model.Country, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) FirstOrCreate() (*model.Country, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) FindByPage(offset int, limit int) (result []*model.Country, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c countryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c countryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c countryDo) Delete(models ...*model.Country) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *countryDo) withDO(do gen.Dao) *countryDo {
	c.DO = *do.(*gen.DO)
	return c
}
