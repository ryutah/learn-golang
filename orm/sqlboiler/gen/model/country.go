// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Country is an object representing the database table.
type Country struct {
	Code           string            `boil:"code" json:"code" toml:"code" yaml:"code"`
	Name           string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Continent      string            `boil:"continent" json:"continent" toml:"continent" yaml:"continent"`
	Region         string            `boil:"region" json:"region" toml:"region" yaml:"region"`
	Surfacearea    float32           `boil:"surfacearea" json:"surfacearea" toml:"surfacearea" yaml:"surfacearea"`
	Indepyear      null.Int16        `boil:"indepyear" json:"indepyear,omitempty" toml:"indepyear" yaml:"indepyear,omitempty"`
	Population     int               `boil:"population" json:"population" toml:"population" yaml:"population"`
	Lifeexpectancy null.Float32      `boil:"lifeexpectancy" json:"lifeexpectancy,omitempty" toml:"lifeexpectancy" yaml:"lifeexpectancy,omitempty"`
	GNP            types.NullDecimal `boil:"gnp" json:"gnp,omitempty" toml:"gnp" yaml:"gnp,omitempty"`
	Gnpold         types.NullDecimal `boil:"gnpold" json:"gnpold,omitempty" toml:"gnpold" yaml:"gnpold,omitempty"`
	Localname      string            `boil:"localname" json:"localname" toml:"localname" yaml:"localname"`
	Governmentform string            `boil:"governmentform" json:"governmentform" toml:"governmentform" yaml:"governmentform"`
	Headofstate    null.String       `boil:"headofstate" json:"headofstate,omitempty" toml:"headofstate" yaml:"headofstate,omitempty"`
	Capital        null.Int          `boil:"capital" json:"capital,omitempty" toml:"capital" yaml:"capital,omitempty"`
	Code2          string            `boil:"code2" json:"code2" toml:"code2" yaml:"code2"`

	R *countryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L countryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CountryColumns = struct {
	Code           string
	Name           string
	Continent      string
	Region         string
	Surfacearea    string
	Indepyear      string
	Population     string
	Lifeexpectancy string
	GNP            string
	Gnpold         string
	Localname      string
	Governmentform string
	Headofstate    string
	Capital        string
	Code2          string
}{
	Code:           "code",
	Name:           "name",
	Continent:      "continent",
	Region:         "region",
	Surfacearea:    "surfacearea",
	Indepyear:      "indepyear",
	Population:     "population",
	Lifeexpectancy: "lifeexpectancy",
	GNP:            "gnp",
	Gnpold:         "gnpold",
	Localname:      "localname",
	Governmentform: "governmentform",
	Headofstate:    "headofstate",
	Capital:        "capital",
	Code2:          "code2",
}

var CountryTableColumns = struct {
	Code           string
	Name           string
	Continent      string
	Region         string
	Surfacearea    string
	Indepyear      string
	Population     string
	Lifeexpectancy string
	GNP            string
	Gnpold         string
	Localname      string
	Governmentform string
	Headofstate    string
	Capital        string
	Code2          string
}{
	Code:           "country.code",
	Name:           "country.name",
	Continent:      "country.continent",
	Region:         "country.region",
	Surfacearea:    "country.surfacearea",
	Indepyear:      "country.indepyear",
	Population:     "country.population",
	Lifeexpectancy: "country.lifeexpectancy",
	GNP:            "country.gnp",
	Gnpold:         "country.gnpold",
	Localname:      "country.localname",
	Governmentform: "country.governmentform",
	Headofstate:    "country.headofstate",
	Capital:        "country.capital",
	Code2:          "country.code2",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CountryWhere = struct {
	Code           whereHelperstring
	Name           whereHelperstring
	Continent      whereHelperstring
	Region         whereHelperstring
	Surfacearea    whereHelperfloat32
	Indepyear      whereHelpernull_Int16
	Population     whereHelperint
	Lifeexpectancy whereHelpernull_Float32
	GNP            whereHelpertypes_NullDecimal
	Gnpold         whereHelpertypes_NullDecimal
	Localname      whereHelperstring
	Governmentform whereHelperstring
	Headofstate    whereHelpernull_String
	Capital        whereHelpernull_Int
	Code2          whereHelperstring
}{
	Code:           whereHelperstring{field: "\"country\".\"code\""},
	Name:           whereHelperstring{field: "\"country\".\"name\""},
	Continent:      whereHelperstring{field: "\"country\".\"continent\""},
	Region:         whereHelperstring{field: "\"country\".\"region\""},
	Surfacearea:    whereHelperfloat32{field: "\"country\".\"surfacearea\""},
	Indepyear:      whereHelpernull_Int16{field: "\"country\".\"indepyear\""},
	Population:     whereHelperint{field: "\"country\".\"population\""},
	Lifeexpectancy: whereHelpernull_Float32{field: "\"country\".\"lifeexpectancy\""},
	GNP:            whereHelpertypes_NullDecimal{field: "\"country\".\"gnp\""},
	Gnpold:         whereHelpertypes_NullDecimal{field: "\"country\".\"gnpold\""},
	Localname:      whereHelperstring{field: "\"country\".\"localname\""},
	Governmentform: whereHelperstring{field: "\"country\".\"governmentform\""},
	Headofstate:    whereHelpernull_String{field: "\"country\".\"headofstate\""},
	Capital:        whereHelpernull_Int{field: "\"country\".\"capital\""},
	Code2:          whereHelperstring{field: "\"country\".\"code2\""},
}

// CountryRels is where relationship names are stored.
var CountryRels = struct {
	CapitalCity                 string
	CountrycodeCountrylanguages string
}{
	CapitalCity:                 "CapitalCity",
	CountrycodeCountrylanguages: "CountrycodeCountrylanguages",
}

// countryR is where relationships are stored.
type countryR struct {
	CapitalCity                 *City                `boil:"CapitalCity" json:"CapitalCity" toml:"CapitalCity" yaml:"CapitalCity"`
	CountrycodeCountrylanguages CountrylanguageSlice `boil:"CountrycodeCountrylanguages" json:"CountrycodeCountrylanguages" toml:"CountrycodeCountrylanguages" yaml:"CountrycodeCountrylanguages"`
}

// NewStruct creates a new relationship struct
func (*countryR) NewStruct() *countryR {
	return &countryR{}
}

func (r *countryR) GetCapitalCity() *City {
	if r == nil {
		return nil
	}
	return r.CapitalCity
}

func (r *countryR) GetCountrycodeCountrylanguages() CountrylanguageSlice {
	if r == nil {
		return nil
	}
	return r.CountrycodeCountrylanguages
}

// countryL is where Load methods for each relationship are stored.
type countryL struct{}

var (
	countryAllColumns            = []string{"code", "name", "continent", "region", "surfacearea", "indepyear", "population", "lifeexpectancy", "gnp", "gnpold", "localname", "governmentform", "headofstate", "capital", "code2"}
	countryColumnsWithoutDefault = []string{"code", "name", "continent", "region", "surfacearea", "population", "localname", "governmentform", "code2"}
	countryColumnsWithDefault    = []string{"indepyear", "lifeexpectancy", "gnp", "gnpold", "headofstate", "capital"}
	countryPrimaryKeyColumns     = []string{"code"}
	countryGeneratedColumns      = []string{}
)

type (
	// CountrySlice is an alias for a slice of pointers to Country.
	// This should almost always be used instead of []Country.
	CountrySlice []*Country
	// CountryHook is the signature for custom Country hook methods
	CountryHook func(context.Context, boil.ContextExecutor, *Country) error

	countryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	countryType                 = reflect.TypeOf(&Country{})
	countryMapping              = queries.MakeStructMapping(countryType)
	countryPrimaryKeyMapping, _ = queries.BindMapping(countryType, countryMapping, countryPrimaryKeyColumns)
	countryInsertCacheMut       sync.RWMutex
	countryInsertCache          = make(map[string]insertCache)
	countryUpdateCacheMut       sync.RWMutex
	countryUpdateCache          = make(map[string]updateCache)
	countryUpsertCacheMut       sync.RWMutex
	countryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var countryAfterSelectHooks []CountryHook

var countryBeforeInsertHooks []CountryHook
var countryAfterInsertHooks []CountryHook

var countryBeforeUpdateHooks []CountryHook
var countryAfterUpdateHooks []CountryHook

var countryBeforeDeleteHooks []CountryHook
var countryAfterDeleteHooks []CountryHook

var countryBeforeUpsertHooks []CountryHook
var countryAfterUpsertHooks []CountryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Country) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Country) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Country) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Country) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Country) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Country) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Country) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Country) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Country) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range countryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCountryHook registers your hook function for all future operations.
func AddCountryHook(hookPoint boil.HookPoint, countryHook CountryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		countryAfterSelectHooks = append(countryAfterSelectHooks, countryHook)
	case boil.BeforeInsertHook:
		countryBeforeInsertHooks = append(countryBeforeInsertHooks, countryHook)
	case boil.AfterInsertHook:
		countryAfterInsertHooks = append(countryAfterInsertHooks, countryHook)
	case boil.BeforeUpdateHook:
		countryBeforeUpdateHooks = append(countryBeforeUpdateHooks, countryHook)
	case boil.AfterUpdateHook:
		countryAfterUpdateHooks = append(countryAfterUpdateHooks, countryHook)
	case boil.BeforeDeleteHook:
		countryBeforeDeleteHooks = append(countryBeforeDeleteHooks, countryHook)
	case boil.AfterDeleteHook:
		countryAfterDeleteHooks = append(countryAfterDeleteHooks, countryHook)
	case boil.BeforeUpsertHook:
		countryBeforeUpsertHooks = append(countryBeforeUpsertHooks, countryHook)
	case boil.AfterUpsertHook:
		countryAfterUpsertHooks = append(countryAfterUpsertHooks, countryHook)
	}
}

// One returns a single country record from the query.
func (q countryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Country, error) {
	o := &Country{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for country")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Country records from the query.
func (q countryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CountrySlice, error) {
	var o []*Country

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Country slice")
	}

	if len(countryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Country records in the query.
func (q countryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count country rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q countryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if country exists")
	}

	return count > 0, nil
}

// CapitalCity pointed to by the foreign key.
func (o *Country) CapitalCity(mods ...qm.QueryMod) cityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Capital),
	}

	queryMods = append(queryMods, mods...)

	return Cities(queryMods...)
}

// CountrycodeCountrylanguages retrieves all the countrylanguage's Countrylanguages with an executor via countrycode column.
func (o *Country) CountrycodeCountrylanguages(mods ...qm.QueryMod) countrylanguageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"countrylanguage\".\"countrycode\"=?", o.Code),
	)

	return Countrylanguages(queryMods...)
}

// LoadCapitalCity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (countryL) LoadCapitalCity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCountry interface{}, mods queries.Applicator) error {
	var slice []*Country
	var object *Country

	if singular {
		var ok bool
		object, ok = maybeCountry.(*Country)
		if !ok {
			object = new(Country)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCountry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCountry))
			}
		}
	} else {
		s, ok := maybeCountry.(*[]*Country)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCountry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCountry))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countryR{}
		}
		if !queries.IsNil(object.Capital) {
			args = append(args, object.Capital)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Capital) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Capital) {
				args = append(args, obj.Capital)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`city`),
		qm.WhereIn(`city.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load City")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice City")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for city")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for city")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CapitalCity = foreign
		if foreign.R == nil {
			foreign.R = &cityR{}
		}
		foreign.R.CapitalCountries = append(foreign.R.CapitalCountries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Capital, foreign.ID) {
				local.R.CapitalCity = foreign
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.CapitalCountries = append(foreign.R.CapitalCountries, local)
				break
			}
		}
	}

	return nil
}

// LoadCountrycodeCountrylanguages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (countryL) LoadCountrycodeCountrylanguages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCountry interface{}, mods queries.Applicator) error {
	var slice []*Country
	var object *Country

	if singular {
		var ok bool
		object, ok = maybeCountry.(*Country)
		if !ok {
			object = new(Country)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCountry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCountry))
			}
		}
	} else {
		s, ok := maybeCountry.(*[]*Country)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCountry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCountry))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &countryR{}
		}
		args = append(args, object.Code)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &countryR{}
			}

			for _, a := range args {
				if a == obj.Code {
					continue Outer
				}
			}

			args = append(args, obj.Code)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`countrylanguage`),
		qm.WhereIn(`countrylanguage.countrycode in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load countrylanguage")
	}

	var resultSlice []*Countrylanguage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice countrylanguage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on countrylanguage")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for countrylanguage")
	}

	if len(countrylanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountrycodeCountrylanguages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &countrylanguageR{}
			}
			foreign.R.CountrycodeCountry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Code == foreign.Countrycode {
				local.R.CountrycodeCountrylanguages = append(local.R.CountrycodeCountrylanguages, foreign)
				if foreign.R == nil {
					foreign.R = &countrylanguageR{}
				}
				foreign.R.CountrycodeCountry = local
				break
			}
		}
	}

	return nil
}

// SetCapitalCity of the country to the related item.
// Sets o.R.CapitalCity to related.
// Adds o to related.R.CapitalCountries.
func (o *Country) SetCapitalCity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *City) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"country\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"capital"}),
		strmangle.WhereClause("\"", "\"", 2, countryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Code}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Capital, related.ID)
	if o.R == nil {
		o.R = &countryR{
			CapitalCity: related,
		}
	} else {
		o.R.CapitalCity = related
	}

	if related.R == nil {
		related.R = &cityR{
			CapitalCountries: CountrySlice{o},
		}
	} else {
		related.R.CapitalCountries = append(related.R.CapitalCountries, o)
	}

	return nil
}

// RemoveCapitalCity relationship.
// Sets o.R.CapitalCity to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Country) RemoveCapitalCity(ctx context.Context, exec boil.ContextExecutor, related *City) error {
	var err error

	queries.SetScanner(&o.Capital, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("capital")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CapitalCity = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CapitalCountries {
		if queries.Equal(o.Capital, ri.Capital) {
			continue
		}

		ln := len(related.R.CapitalCountries)
		if ln > 1 && i < ln-1 {
			related.R.CapitalCountries[i] = related.R.CapitalCountries[ln-1]
		}
		related.R.CapitalCountries = related.R.CapitalCountries[:ln-1]
		break
	}
	return nil
}

// AddCountrycodeCountrylanguages adds the given related objects to the existing relationships
// of the country, optionally inserting them as new records.
// Appends related to o.R.CountrycodeCountrylanguages.
// Sets related.R.CountrycodeCountry appropriately.
func (o *Country) AddCountrycodeCountrylanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Countrylanguage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Countrycode = o.Code
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"countrylanguage\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"countrycode"}),
				strmangle.WhereClause("\"", "\"", 2, countrylanguagePrimaryKeyColumns),
			)
			values := []interface{}{o.Code, rel.Countrycode, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Countrycode = o.Code
		}
	}

	if o.R == nil {
		o.R = &countryR{
			CountrycodeCountrylanguages: related,
		}
	} else {
		o.R.CountrycodeCountrylanguages = append(o.R.CountrycodeCountrylanguages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &countrylanguageR{
				CountrycodeCountry: o,
			}
		} else {
			rel.R.CountrycodeCountry = o
		}
	}
	return nil
}

// Countries retrieves all the records using an executor.
func Countries(mods ...qm.QueryMod) countryQuery {
	mods = append(mods, qm.From("\"country\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"country\".*"})
	}

	return countryQuery{q}
}

// FindCountry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCountry(ctx context.Context, exec boil.ContextExecutor, code string, selectCols ...string) (*Country, error) {
	countryObj := &Country{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"country\" where \"code\"=$1", sel,
	)

	q := queries.Raw(query, code)

	err := q.Bind(ctx, exec, countryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from country")
	}

	if err = countryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return countryObj, err
	}

	return countryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Country) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no country provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(countryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	countryInsertCacheMut.RLock()
	cache, cached := countryInsertCache[key]
	countryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			countryAllColumns,
			countryColumnsWithDefault,
			countryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(countryType, countryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(countryType, countryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"country\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"country\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into country")
	}

	if !cached {
		countryInsertCacheMut.Lock()
		countryInsertCache[key] = cache
		countryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Country.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Country) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	countryUpdateCacheMut.RLock()
	cache, cached := countryUpdateCache[key]
	countryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			countryAllColumns,
			countryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update country, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"country\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, countryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(countryType, countryMapping, append(wl, countryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update country row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for country")
	}

	if !cached {
		countryUpdateCacheMut.Lock()
		countryUpdateCache[key] = cache
		countryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q countryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for country")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CountrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"country\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, countryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in country slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all country")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Country) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no country provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(countryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	countryUpsertCacheMut.RLock()
	cache, cached := countryUpsertCache[key]
	countryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			countryAllColumns,
			countryColumnsWithDefault,
			countryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			countryAllColumns,
			countryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert country, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(countryPrimaryKeyColumns))
			copy(conflict, countryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"country\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(countryType, countryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(countryType, countryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert country")
	}

	if !cached {
		countryUpsertCacheMut.Lock()
		countryUpsertCache[key] = cache
		countryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Country record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Country) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Country provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), countryPrimaryKeyMapping)
	sql := "DELETE FROM \"country\" WHERE \"code\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for country")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q countryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no countryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for country")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CountrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(countryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"country\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, countryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from country slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for country")
	}

	if len(countryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Country) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCountry(ctx, exec, o.Code)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CountrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CountrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), countryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"country\".* FROM \"country\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, countryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CountrySlice")
	}

	*o = slice

	return nil
}

// CountryExists checks if the Country row exists.
func CountryExists(ctx context.Context, exec boil.ContextExecutor, code string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"country\" where \"code\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, code)
	}
	row := exec.QueryRowContext(ctx, sql, code)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if country exists")
	}

	return exists, nil
}

// Exists checks if the Country row exists.
func (o *Country) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CountryExists(ctx, exec, o.Code)
}
