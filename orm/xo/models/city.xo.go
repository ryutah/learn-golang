// Package models contains generated code for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// City represents a row from 'public.city'.
type City struct {
	ID          int    `json:"id"`          // id
	Name        string `json:"name"`        // name
	Countrycode string `json:"countrycode"` // countrycode
	District    string `json:"district"`    // district
	Population  int    `json:"population"`  // population
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the City exists in the database.
func (c *City) Exists() bool {
	return c._exists
}

// Deleted returns true when the City has been marked for deletion from
// the database.
func (c *City) Deleted() bool {
	return c._deleted
}

// Insert inserts the City to the database.
func (c *City) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.city (` +
		`id, name, countrycode, district, population` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a City in the database.
func (c *City) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.city SET ` +
		`name = $1, countrycode = $2, district = $3, population = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, c.Name, c.Countrycode, c.District, c.Population, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.Name, c.Countrycode, c.District, c.Population, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the City to the database.
func (c *City) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for City.
func (c *City) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.city (` +
		`id, name, countrycode, district, population` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, countrycode = EXCLUDED.countrycode, district = EXCLUDED.district, population = EXCLUDED.population `
	// run
	logf(sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.Name, c.Countrycode, c.District, c.Population); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the City from the database.
func (c *City) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.city ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CityByID retrieves a row from 'public.city' as a City.
//
// Generated from index 'city_pkey'.
func CityByID(ctx context.Context, db DB, id int) (*City, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, countrycode, district, population ` +
		`FROM public.city ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := City{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.Name, &c.Countrycode, &c.District, &c.Population); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
